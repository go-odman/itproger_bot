from aiogram import Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.parser.itproger_parser import ITProgerParser
from bot.keyboards.reply import main_keyboard, upgrade_keyboard
from bot.keyboards.inline import article_keyboard


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
news_cache = []
current_articles = []
current_index = 0


async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ITProger News Bot!\n\n"
        "–Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å itproger.com\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_keyboard()
    )


async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ - –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–≤–µ–∂–∏–µ —Å—Ç–∞—Ç—å–∏\n"
        "‚Ä¢ üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π - –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º\n"
        "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π\n"
        "‚Ä¢ üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç—å—é"
    )


async def show_latest_news(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"""
    global news_cache, current_articles, current_index
    
    await message.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å itproger.com...", reply_markup=upgrade_keyboard())
    
    try:
        parser = ITProgerParser()
        news = parser.get_news_list()
        
        if not news:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        
        news_cache = news
        current_articles = news.copy()
        current_index = 0
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç–∞—Ç—å—é
        await show_article_message(message, 0)
            
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


async def show_article_message(message: types.Message, index: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—å—é –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
    global current_articles, current_index
    
    if not current_articles or index >= len(current_articles):
        await message.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    article = current_articles[index]
    current_index = index
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"**{article['title']}**\n\n"
    
    if article.get('date'):
        text += f"üìÖ {article['date']}\n"
    
    if article.get('views'):
        text += f"üëÅÔ∏è {article['views']} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n\n"
    
    if article.get('description'):
        # –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        description = article['description']
        if len(description) > 300:
            description = description[:300] + "..."
        text += f"{description}\n\n"
    
    text += f"[üìñ –ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ]({article['url']})"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = article_keyboard(article['url'], index, len(current_articles))
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        if article.get('image_url') and article['image_url'].startswith('http'):
            await message.answer_photo(
                photo=article['image_url'],
                caption=text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–µ–≥–æ
        await message.answer(
            text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )


async def show_full_article_content(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏"""
    global current_articles
    
    index = int(call.data.split(':')[1])
    
    if index >= len(current_articles):
        await call.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    article = current_articles[index]
    
    await call.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...")
    
    parser = ITProgerParser()
    full_content = parser.get_article_content(article['url'])
    
    content_text = f"**{full_content['title']}**\n\n"
    
    if full_content['full_content']:
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        content = full_content['full_content']
        if len(content) > 4000:
            content = content[:4000] + "\n\n... (—Ç–µ–∫—Å—Ç –æ–±—Ä–µ–∑–∞–Ω, —á–∏—Ç–∞–π—Ç–µ –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞ —Å–∞–π—Ç–µ)"
        
        content_text += content
    else:
        content_text += "üìù –ü–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!\n\n"
        content_text += f"[–ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ]({article['url']})"
    
    try:
        await call.message.answer(
            content_text,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
    except Exception as e:
        await call.message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏",
            parse_mode='Markdown'
        )


async def search_articles(message: types.Message):
    """–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π"""
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: Python, JavaScript, –ò–ò, –∏–≥—Ä—ã –∏ —Ç.–¥."
    )


async def handle_search_query(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    global news_cache, current_articles, current_index
    
    query = message.text.strip()
    
    if not query:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    
    if not news_cache:
        await message.answer("üîÑ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏...")
        await show_latest_news(message)
        return
    
    await message.answer(f"üîç –ò—â—É —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
    
    parser = ITProgerParser()
    filtered_articles = []
    
    # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    for article in news_cache:
        if (query.lower() in article['title'].lower() or 
            query.lower() in article.get('description', '').lower()):
            filtered_articles.append(article)
    
    if not filtered_articles:
        await message.answer(f"‚ùå –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    current_articles = filtered_articles
    current_index = 0
    await message.answer(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(filtered_articles)}")
    await show_article_message(message, 0)


async def handle_callback(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    global current_index
    
    if call.data.startswith('article:'):
        index = int(call.data.split(':')[1])
        await call.answer()
        await show_article_message(call.message, index)
        
    elif call.data.startswith('full_content:'):
        await show_full_article_content(call)
    
    await call.answer()


async def handle_upgrade_data(message: types.Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    await show_latest_news(message)


async def show_current_article(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç—å—é"""
    global current_articles, current_index
    
    if not current_articles:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏'")
        return
    
    await show_article_message(message, current_index)


async def handle_unknown_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await message.answer(
        "ü§î –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/help - –ø–æ–º–æ—â—å"
    )


def register_user_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ö–æ–º–∞–Ω–¥—ã
    dp.message.register(cmd_start, Command(commands=["start"]))
    dp.message.register(cmd_help, Command(commands=["help"]))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(show_latest_news, lambda message: message.text == "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
    dp.message.register(search_articles, lambda message: message.text == "üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π")
    dp.message.register(handle_upgrade_data, lambda message: message.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    dp.message.register(show_current_article, lambda message: message.text == "üìÑ –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç—å—è")
    
    # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏)
    dp.message.register(handle_search_query)
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(handle_callback)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º)
    dp.message.register(handle_unknown_message)